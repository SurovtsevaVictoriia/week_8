1.
	состояние гонки возникает, когда несколько потоков одновременно требуют 
	доступ на чтение и запись разделенного рессурса. Такое состояние, при котором состояние переменной в результате
	выполнения операция двух птооков зависит от порядка их получения доступа к ресурсу.

// механизмы синхронизации: блокирующие - неблокирующие (семафоры Дейкстеры - атомарные операции)
семафоры - разделяемая целочисленная переменная S = N - "местность семафора"
	S > 0 --> S--;
	S <= 0 --> вызывающий поток блокируется(не может уменьшить меньше ноля)
	V(S) = S++;(атомарно- вся операция делается за раз, нельзя переключить поток)
	одноместный семафор это мьютекс

	P(S) - при входе в критическую зону, V(S) при выходе
	это все просто гарантирует что в критической секции не более N потоков

2. 
	Мьютекс - семафор на один поток. Запрещает находиться в критической зоне более чем одному потоку. 
	Условные переменные используются для при уведомлении птока о завершении операции
3.
	Гранулярность блокировки: минимальный объект к которому блокируется доступ (строка, таблица и т.д)

4. 
	Dead lock два мьютеса над одной критической зоной могут привести к взаимной блокировке и поломать программу.
5. 
	Атомарный тип данных (атомарные переменные) - создаются в одном подготовительном потоке, потом обрабатываются в исполнительном потоке
синхронизируются при помощи мьютексов
	атомарные операции:
результат работы: либо все все операции из набора отработали, либо ни одна не отработала.
а если и отработали то откатились в обратное состояния 
нельзя увидеть промежуточное состояние
пример: банковская транзакция

